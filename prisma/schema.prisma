// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  firstName String
  lastName  String
  address   String?
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER // Regular customer
  ADMIN // Admin with access to the admin tool
}

model Product {
  id           Int           @id @default(autoincrement())
  name         String
  description  String
  price        Float
  stock        Int
  imageUrl     String
  categoryId   Int
  category     Category      @relation(fields: [categoryId], references: [id])
  variants     Variant[]
  orders       OrderItem[]   @relation("ProductOrders") // Related field for OrderItems
  rawMaterials RawMaterial[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Variant {
  id        Int         @id @default(autoincrement())
  productId Int
  product   Product     @relation(fields: [productId], references: [id]) // Add relation here
  size      String
  color     String
  price     Float
  stock     Int
  isDefault Boolean @default(false)
  imageUrl  String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  OrderItem OrderItem[]
}

model RawMaterial {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  quantity    Int
  unitPrice   Float
  productId   Int
  product     Product  @relation(fields: [productId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  totalAmount Float
  status      OrderStatus
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELED
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation("ProductOrders", fields: [productId], references: [id]) // Add relation here
  variantId Int?
  variant   Variant? @relation(fields: [variantId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
